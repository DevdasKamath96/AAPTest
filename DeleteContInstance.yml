- name: Delete MCS Card Instance
  hosts: all
  gather_facts: no

  tasks:


    - name: Get AAP authentication token
      uri:
      url: "{{ aap_url }}/api/v2/tokens/"
      method: POST
      headers:
        Content-Type: "application/json"
      body: '{}'
      body_format: json
      validate_certs: no
      url_username: "{{ aap_username }}"
      url_password: "{{ aap_password }}"
      register: aap_token_response

    - name: Set AAP token fact
      set_fact:
      aap_token: "{{ aap_token_response.json.token }}"

    - name: Get absolute path of the project directory using AAP API
      uri:
      url: "{{ aap_url }}/api/v2/projects/{{ project_id }}/"
      method: GET
      headers:
        Authorization: "Bearer {{ aap_token }}"
        Content-Type: "application/json"
      validate_certs: no
      register: project_info

    - name: Set project_dir fact from AAP API response
      set_fact:
      project_dir: "{{ project_info.json.local_path }}"

    - name: Get the list of microservice containers
      uri:
         url: "http://{{ cms_url }}/cms/networkmap?v=1620732259069"
         method: POST
         headers:
           Connection: 'keep-alive'
           Authorization: 'Bearer {{ cms_token }} '
           Accept: 'application/json, text/plain, */*'
         validate_certs: no
         timeout: 420
         body: '{"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_GETALL","object":{"dgId":""}}'
         body_format: json
      register: container_add
      failed_when: container_add.status not in [200, 201]

    - name: Filter microservice containers list
      set_fact:
          doc1: "{{ container_add |to_json| from_json | json_query('json.data.values[]') }}"


    - name: Container delete request
      set_fact:
        container_delete: >
           {% for item in doc1 %}
             {% if item.CONTAINER_SIGCARDID in SIGNALLING_CARD_IDS %}
                 {"context":"MICROSVC_CARDCONFIG","action":"MICROSVC_CARDCONFIG_DELETE","actionObject":[
                           {"SERVICETYPE": "{{SERVICETYPE}}", "SIGNALINGCARDID": {{item.CONTAINER_SIGCARDID}},"IPADDRESS": "{{ item.IPADDRESS }}", "SIGNALINGCARD_NAME": "{{item.SIGNALINGCARD_NAME}}", "SIGNALINGCARDTYPE": {{ item.SIGNALINGCARDTYPE }},"CLUSTERID": "{{CLUSTERID}}", "CHASSISID": "{{CHASSISID}}"}
                ]}
             {% endif %}
           {% endfor %}

    - name: delete microservice containers instance
      uri:
        url: "http://{{ cms_url }}/cms/config?v=1760525374476"
        method: POST
        headers:
          Connection: 'keep-alive'
          Authorization: 'Bearer {{ cms_token }} '
          Accept: 'application/json, text/plain, */*'
        validate_certs: no
        timeout: 420
        body: '{{ container_delete }}'
        body_format: json
      register: container_delete
      failed_when: container_delete.json.code | int not in [200, 201]
