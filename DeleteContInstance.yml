- name: Delete MCS Card Instance
  hosts: all
  gather_facts: no

  tasks:


    - name: Get the list of microservice containers
      uri:
         url: "http://{{ cms_url }}/cms/networkmap?v=1620732259069"
         method: POST
         headers:
           Connection: 'keep-alive'
           Authorization: 'Bearer {{ cms_token }} '
           Accept: 'application/json, text/plain, */*'
         validate_certs: no
         timeout: 420
         body: '{"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_GETALL","object":{"dgId":""}}'
         body_format: json
      register: container_add
      failed_when: container_add.status not in [200, 201]

    - name: Filter microservice containers list
      set_fact:
          doc1: "{{ container_add |to_json| from_json | json_query('json.data.values[]') }}"


    - name: Container delete request
      set_fact:
        container_delete: >
           {% for item in doc1 %}
             {% if item.CONTAINER_SIGCARDID in SIGNALLING_CARD_IDS %}
                 {"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CARDCONFIG_DELETE","actionObject":[
                           {"SERVICETYPE": "{{SERVICETYPE}}", "SIGNALINGCARDID":{{item.CONTAINER_SIGCARDID}},"IPADDRESS":"{{ item.IPADDRESS }}", "SIGNALINGCARD_NAME": "{{item.SIGNALINGCARD_NAME}}", "SIGNALINGCARDTYPE":{{ item.SIGNALINGCARDTYPE }},"CLUSTERID": "{{CLUSTERID}}", "CHASSISID": "{{CHASSISID}}"},
                ]}
             {% endif %}
           {% endfor %}

    - name: delete microservice containers instance
      uri:
        url: "http://{{ cms_url }}/cms/config?v=1760345592484"
        method: POST
        headers:
          Connection: 'keep-alive'
          Authorization: 'Bearer {{ cms_token }} '
          Accept: 'application/json, text/plain, */*'
        validate_certs: no
        timeout: 420
        body: '{{ container_delete }}'
        body_format: json
      register: container_delete
      failed_when: container_launch.json.code | int not in [200, 201]
